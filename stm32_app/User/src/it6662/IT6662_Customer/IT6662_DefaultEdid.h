///*****************************************
//  Copyright (C) 2009-2015
//  ITE Tech. Inc. All Rights Reserved
//  Proprietary and Confidential
///*****************************************
//   @file   <IT6662_DefaultEdid.h>
//   @author Hanming.Cheng@ite.com.tw
//   @date   2015/07/03
//   @fileversion: ITE_SPLITER_1.13
//******************************************/
///*****************************************
//  Copyright (C) 2009-2014
//  ITE Tech. Inc. All Rights Reserved
//  Proprietary and Confidential
///*****************************************
//   @file   <IT6662_DefaultEdid.h>
//   @author Hanming.Cheng@ite.com.tw
//   @date   2014/12/17
//   @fileversion: ITE_SPLITER_1.01
//******************************************/
#ifndef _IT6662_DEFAULTEDID_H_
#define _IT6662_DEFAULTEDID_H_

#ifdef _MHL_MSC_INIT_TAB_
//#define EDIDContentSel		(3)		// 1: 3D 8bit ,2: Big Pattern gen ,3: 4Kx2K
iTE_u8 _CODE uc3DDtd[]={0x00};		//unsupport 3D DTD information

#if (USING_DEFAULT_3D_VIC == iTE_TRUE)
iTE_u8 _CODE uc3DVic[]={0x00};
#endif

#if (USING_DEFAULT_3D_VIC == iTE_TRUE)
#define USING_CALLOC				(iTE_FALSE)		//calloc will not use when USING_DEFAULT_3D_VIC set
#else
#define USING_CALLOC				(iTE_FALSE)		//set if system support calloc function
#endif

#if (USING_CALLOC==iTE_FALSE)
#define VIC_3D_MAX					(16)
#if(VIC_3D_MAX < 16)
	#pragma message("ERROR: VIC_3D_MAX need bigger than 16")
#endif
#endif

#if (USING_CALLOC == iTE_TRUE)
#include <stdlib.h>
#else
iTE_u8	uc3DInfor[VIC_3D_MAX];
#endif
#endif

#ifdef _EDID_TAB_
iTE_u8	_CODE	u8EdidFHD[256] = {
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x26, 0x85, 0x62, 0x66, 0x01, 0x00, 0x00, 0x00,
0x0C, 0x14, 0x01, 0x03, 0x80, 0x3E, 0x22, 0x78, 0x0A, 0x1E, 0xAC, 0x98, 0x59, 0x56, 0x85, 0x28,
0x29, 0x52, 0x57, 0x20, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x3A, 0x80, 0x18, 0x71, 0x38, 0x2D, 0x40, 0x58, 0x2C,
0x45, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x1E, 0x8C, 0x0A, 0xD0, 0x8A, 0x20, 0xE0, 0x2D, 0x10,
0x10, 0x3E, 0x96, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x49,
0x54, 0x45, 0x2D, 0x46, 0x48, 0x44, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFD,
0x00, 0x17, 0x3D, 0x0D, 0x2E, 0x11, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x9D,

0x02, 0x03, 0x18, 0xF3, 0x43, 0x90, 0x04, 0x03, 0x23, 0x09, 0x07, 0x07, 0x83, 0x01, 0x00, 0x00,
0x67, 0x03, 0x0C, 0x00, DefaultEdid_PA_AB, DefaultEdid_PA_CD, 0x00, 0x2D, 0x02, 0x3A, 0x80, 0x18, 0x71, 0x38, 0x2D, 0x40,
0x58, 0x2C, 0x45, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x1E, 0x01, 0x1D, 0x00, 0x72, 0x51, 0xD0,
0x1E, 0x20, 0x6E, 0x28, 0x55, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x1E, 0x8C, 0x0A, 0xD0, 0x8A,
0x20, 0xE0, 0x2D, 0x10, 0x10, 0x3E, 0x96, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x18, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A - DefaultEdid_PA_AB - DefaultEdid_PA_CD ,
};
iTE_u8	_CODE	u8Edid4K2K[256] = {
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x26, 0x85, 0x62, 0x66, 0x01, 0x00, 0x00, 0x00,
0x0C, 0x14, 0x01, 0x03, 0x80, 0x3E, 0x22, 0x78, 0x0A, 0x1E, 0xAC, 0x98, 0x59, 0x56, 0x85, 0x28,
0x29, 0x52, 0x57, 0x20, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x74, 0x00, 0x30, 0xF2, 0x70, 0x5A, 0x80, 0xB0, 0x58,
0x8A, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x1A, 0xD5, 0x09, 0x80, 0xA0, 0x20, 0xE0, 0x2D, 0x10,
0x10, 0x60, 0xA2, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x49, 
0x46, 0x43, 0x5F, 0x4D, 0x36, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFD,
0x00, 0x17, 0x3D, 0x0D, 0x2E, 0x11, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0xAF,

0x02, 0x03, 0x27, 0xD3, 0x4C, 0x90, 0x5F, 0x5E, 0x5D, 0x04, 0x03, 0x05, 0x14, 0x1F, 0x22, 0x21, 
0x13, 0x23, 0x09, 0x07, 0x07, 0x83, 0x01, 0x00, 0x00, 0x6D, 0x03, 0x0C, 0x00, 0x10, 0x00, 0x00, 
0x3C, 0x20, 0x00, 0x60, 0x01, 0x02, 0x03, 0x04, 0x74, 0x00, 0x30, 0xF2, 0x70, 0x5A, 0x80, 0xB0, 
0x58, 0x8A, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x1A, 0x8C, 0x0A, 0xD0, 0x8A, 0x20, 0xE0, 0x2D, 
0x10, 0x10, 0x3E, 0x96, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x18, 0x02, 0x3A, 0x80, 0x18, 0x71, 
0x38, 0x2D, 0x40, 0x58, 0x2C, 0x45, 0x00, 0x6D, 0x55, 0x21, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37,
};

#endif
#endif
